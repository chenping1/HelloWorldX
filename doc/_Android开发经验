#### 架构设计
1. MVVM 数据驱动UI
2. 服务端的数据和客户端数据模型不一致时候， 建立DataMapper 来做转换
3. 业务逻辑少 将逻辑放在viewModel层 ，业务逻辑多将逻辑放到use case中
4. 函数式编程 使用rxjava或者flow来处理数据

#### 快捷键
| 功能 | 快捷建 |
| --- | --- |
| 复制当前行 |  Ctrl + D |
| 行数定位 |  Ctrl + G |
| 显示类继承 | Ctrl + H |
| 显示父类可覆写的方法 | Ctrl + O |
| 自动代码 | Ctrl + J |
| 查找文件名 | Ctrl + N |
| 弹框显示类中方法和变量 | Ctrl + F12 |
| 弹框显示最近打开的文件 | Ctrl + E |
| 快速包裹if/catch (surround with) |  CTRL + ALT + 1 |
| 代码调用关系框 | Ctrl + Alt + H |
| 自动导包或删除无用的包 |  Ctrl + Alt + O |
| 快捷代码生成insert get/set |  Alt + Insert |
| 重命名 |  Shift + F6 |
| 快速定位错误位置 |  Shift + F2 |
| 光标快速移动 |  Alt + 上/下箭头 |
| 自动导包 | File -->Setting-->Editor-->General-->Auto Import ，勾选以下两项Add unambiguous imports on the fly(自动导入包) Optimize imports on the fly(自动删除无用的包) |

####  组件化带来的优势
1. 拆分模块 大公司分成一个个小部门
2. 模块间自然解耦  由于编译隔离
3. 可重用性,可替代 可重用的util widget base
4. 编译速度


- 适时推出重构，将以往不好的沉淀问题优化
- 代码多用注释尤其是对外暴露方法 多用@see @link 正确示例代码 让调用方参考
- 模块责任人制度 对模块的代码和设计负责

#### 空闲时间
1. 起个好名字
2. 提供抽离整合的工具类 组件库比如dialog Toolbar 侧边筛选
3. 不断重构代码
4. 架构方面 AOP依赖注入编程 缓存组件 网络请求



####  提测前
1. android 模拟应用因内存不足被后台杀死  测试的时候用到

* [美团持续交付 版本管理](https://tech.meituan.com/2020/02/13/meituan-waimai-continuous-delivery.html)

#### 项目
##### 架构相关
1. 业务终端
2. 系统交互图
3. 技术栈
4. 技术架构图 如何书写架构方案

##### 技术相关
###### 脚手架
1. 技术选型
2. 脚手架选型
3. 系统模块处理
- 权限
- 多页签
- 登录校验
4. 公共模块处理
- 公共方法
- 公告枚举
- 公共Service
- 公共组件
###### 技术调研和落地
###### 业务开发demo
1. 代码demo
2. 开发讲解
3. 文档说明
###### 任务划分相关
1. 任务排期预估
2. 人力资源估算
3. 协调人力资源
4. 根据阶段目标check 任务排期是否合适

###### 开发规范
1. 代码开发规范
2. 提交规范
3. 协作流程

###### 内部协同规范
1. 早会 周会 下发任务沟通 完成任务汇报 疑难问题协同

###### 文档规范
1. 相关文档汇总地址  技术文档 规范文档  周会文档汇总

##### 前端部门相关
1. 公共脚手架或者npm包
2. 疑难问题 & 相似问题沟通
3. 风险汇报 & 人力协调

##### 项目相关
1. 项目背景
2. 项目愿景
3. 项目价值是什么
4. 项目阶段和周期安排

##### 团队相关
1. 人员组成部分
- 架构师 前端 后端 测试 产品
2. 团队风格
- 周会  早会(会议形式 汇报内容)

##### 协作相关
1. 与产品
- 了解业务形态
- 参与业务评审
- 梳理业务流程
- 统一原型规范
2. 与后台
- 统一前后端共识
- 提出前端需要的数据结构
- 前端出问题， 定位到什么接口出什么错误
3. 与测试
- 统一交付测试认知
- 公共模块的统一处理认知
- 测试验收的流程确认
